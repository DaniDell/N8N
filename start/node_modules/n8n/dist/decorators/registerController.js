"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerController = exports.createScopedMiddleware = exports.createLicenseMiddleware = void 0;
const typedi_1 = require("typedi");
const express_1 = require("express");
const express_rate_limit_1 = require("express-rate-limit");
const n8n_workflow_1 = require("n8n-workflow");
const auth_service_1 = require("../auth/auth.service");
const config_1 = __importDefault(require("../config"));
const unauthenticated_error_1 = require("../errors/response-errors/unauthenticated.error");
const constants_1 = require("../constants");
const License_1 = require("../License");
const ResponseHelper_1 = require("../ResponseHelper");
const constants_2 = require("./constants");
const checkAccess_1 = require("../permissions/checkAccess");
const createRateLimitMiddleware = (rateLimit) => (0, express_rate_limit_1.rateLimit)({
    windowMs: rateLimit.windowMs,
    limit: rateLimit.limit,
    message: { message: 'Too many requests' },
});
const createLicenseMiddleware = (features) => (_req, res, next) => {
    if (features.length === 0) {
        return next();
    }
    const licenseService = typedi_1.Container.get(License_1.License);
    const hasAllFeatures = features.every((feature) => licenseService.isFeatureEnabled(feature));
    if (!hasAllFeatures) {
        return res
            .status(403)
            .json({ status: 'error', message: 'Plan lacks license for this feature' });
    }
    return next();
};
exports.createLicenseMiddleware = createLicenseMiddleware;
const createScopedMiddleware = (routeScopeMetadata) => async (req, res, next) => {
    if (!req.user)
        throw new unauthenticated_error_1.UnauthenticatedError();
    const { scopes, globalOnly } = routeScopeMetadata;
    if (scopes.length === 0)
        return next();
    if (!(await (0, checkAccess_1.userHasScope)(req.user, scopes, globalOnly, req.params))) {
        return res.status(403).json({
            status: 'error',
            message: constants_1.RESPONSE_ERROR_MESSAGES.MISSING_SCOPE,
        });
    }
    return next();
};
exports.createScopedMiddleware = createScopedMiddleware;
const registerController = (app, controllerClass) => {
    var _a;
    const controller = typedi_1.Container.get(controllerClass);
    const controllerBasePath = Reflect.getMetadata(constants_2.CONTROLLER_BASE_PATH, controllerClass);
    if (!controllerBasePath)
        throw new n8n_workflow_1.ApplicationError('Controller is missing the RestController decorator', {
            extra: { controllerName: controllerClass.name },
        });
    const routes = Reflect.getMetadata(constants_2.CONTROLLER_ROUTES, controllerClass);
    const licenseFeatures = Reflect.getMetadata(constants_2.CONTROLLER_LICENSE_FEATURES, controllerClass);
    const routeScopes = Reflect.getMetadata(constants_2.CONTROLLER_ROUTE_SCOPES, controllerClass);
    if (routes.length > 0) {
        const router = (0, express_1.Router)({ mergeParams: true });
        const restBasePath = config_1.default.getEnv('endpoints.rest');
        const prefix = `/${[restBasePath, controllerBasePath].join('/')}`
            .replace(/\/+/g, '/')
            .replace(/\/$/, '');
        const controllerMiddlewares = ((_a = Reflect.getMetadata(constants_2.CONTROLLER_MIDDLEWARES, controllerClass)) !== null && _a !== void 0 ? _a : []).map(({ handlerName }) => controller[handlerName].bind(controller));
        const authService = typedi_1.Container.get(auth_service_1.AuthService);
        routes.forEach(({ method, path, middlewares: routeMiddlewares, handlerName, usesTemplates, skipAuth, rateLimit, }) => {
            var _a, _b;
            const features = (_a = licenseFeatures === null || licenseFeatures === void 0 ? void 0 : licenseFeatures[handlerName]) !== null && _a !== void 0 ? _a : licenseFeatures === null || licenseFeatures === void 0 ? void 0 : licenseFeatures['*'];
            const scopes = (_b = routeScopes === null || routeScopes === void 0 ? void 0 : routeScopes[handlerName]) !== null && _b !== void 0 ? _b : routeScopes === null || routeScopes === void 0 ? void 0 : routeScopes['*'];
            const handler = async (req, res) => await controller[handlerName](req, res);
            router[method](path, ...(constants_1.inProduction && rateLimit ? [createRateLimitMiddleware(rateLimit)] : []), ...(skipAuth ? [] : [authService.authMiddleware]), ...(features ? [(0, exports.createLicenseMiddleware)(features)] : []), ...(scopes ? [(0, exports.createScopedMiddleware)(scopes)] : []), ...controllerMiddlewares, ...routeMiddlewares, usesTemplates ? handler : (0, ResponseHelper_1.send)(handler));
        });
        app.use(prefix, router);
    }
};
exports.registerController = registerController;
//# sourceMappingURL=registerController.js.map